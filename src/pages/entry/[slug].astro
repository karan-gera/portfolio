---
import { getCollection, getEntry } from 'astro:content';
import { ChevronLeft, ExternalLink, Calendar, MapPin, Users } from 'lucide-react';
import BaseLayout from '../../layouts/BaseLayout.astro';

// Generate static paths for all entries
export async function getStaticPaths() {
  const entries = await getCollection('entries');
  return entries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the entry from props (passed by getStaticPaths)
const { entry } = Astro.props;
const { Content } = await entry.render();

// Helper function to format date for display
function formatDate(dateString: string): string {
  const [year, month] = dateString.split('-');
  const date = new Date(parseInt(year), parseInt(month) - 1);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long' 
  });
}

// Helper function to calculate duration
function calculateDuration(start: string, end: string | null): string {
  const startDate = new Date(start + '-01');
  const endDate = end ? new Date(end + '-01') : new Date();
  
  const diffTime = endDate.getTime() - startDate.getTime();
  const diffMonths = Math.ceil(diffTime / (1000 * 60 * 60 * 24 * 30.44)); // Average month length
  
  if (diffMonths < 12) {
    return `${diffMonths} month${diffMonths !== 1 ? 's' : ''}`;
  } else {
    const years = Math.floor(diffMonths / 12);
    const remainingMonths = diffMonths % 12;
    
    if (remainingMonths === 0) {
      return `${years} year${years !== 1 ? 's' : ''}`;
    } else {
      return `${years}y ${remainingMonths}m`;
    }
  }
}

const pageTitle = `${entry.data.title} - Portfolio`;
const pageDescription = entry.data.summary;
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8">
    <!-- Navigation -->
    <nav class="mb-8">
      <a href="/" 
         class="inline-flex items-center space-x-2 font-mono text-sm text-tui-cyan hover:text-tui-green transition-colors">
        <ChevronLeft className="w-4 h-4" />
        <span>Back to timeline</span>
      </a>
    </nav>

    <!-- Entry Header -->
    <header class="mb-12">
      <div class="terminal-border rounded-lg p-8 terminal-glow">
        <!-- Type Badge -->
        <div class="mb-4">
          <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-mono"
                class:list={[
                  entry.data.type === 'work' 
                    ? 'bg-tui-green/20 text-tui-green border border-tui-green/30' 
                    : 'bg-tui-amber/20 text-tui-amber border border-tui-amber/30'
                ]}>
            {entry.data.type === 'work' ? 'Work Experience' : 'Project'}
          </span>
        </div>

        <!-- Title and Role -->
        <h1 class="mb-4 font-mono text-4xl font-medium text-white">
          {entry.data.title}
        </h1>
        
        {entry.data.role && (
          <p class="mb-4 text-xl text-tui-cyan">
            {entry.data.role}
          </p>
        )}

        <!-- Organization and Location -->
        {(entry.data.org || entry.data.location) && (
          <div class="mb-6 flex flex-wrap items-center gap-4 text-gray-300">
            {entry.data.org && (
              <div class="flex items-center space-x-2">
                <Users className="w-4 h-4" />
                <span>{entry.data.org}</span>
              </div>
            )}
            {entry.data.location && (
              <div class="flex items-center space-x-2">
                <MapPin className="w-4 h-4" />
                <span>{entry.data.location}</span>
              </div>
            )}
          </div>
        )}

        <!-- Timeline -->
        <div class="mb-6 flex items-center space-x-2 font-mono text-gray-300">
          <Calendar className="w-4 h-4" />
          <span>
            {formatDate(entry.data.start)} - {entry.data.end ? formatDate(entry.data.end) : 'Present'}
          </span>
          <span class="text-gray-500">({calculateDuration(entry.data.start, entry.data.end)})</span>
        </div>

        <!-- Summary -->
        <p class="text-lg text-gray-300 leading-relaxed">
          {entry.data.summary}
        </p>
      </div>
    </header>

    <!-- Content Grid -->
    <div class="grid gap-8 lg:grid-cols-4">
      <!-- Main Content -->
      <div class="lg:col-span-3">
        <article class="terminal-border rounded-lg p-8 prose prose-invert max-w-none">
          <Content />
        </article>
      </div>

      <!-- Sidebar -->
      <div class="lg:col-span-1 space-y-6">
        <!-- Technologies -->
        {entry.data.tags.length > 0 && (
          <div class="terminal-border rounded-lg p-6">
            <h3 class="font-mono text-lg text-tui-green mb-4">Technologies</h3>
            <div class="flex flex-wrap gap-2">
              {entry.data.tags.map(tag => 
                <span key={tag} class="inline-flex items-center px-2 py-1 rounded text-xs font-mono bg-tui-panel text-gray-300 border border-gray-600">
                  {tag}
                </span>
              )}
            </div>
          </div>
        )}

        <!-- Key Metrics -->
        {entry.data.metrics.length > 0 && (
          <div class="terminal-border rounded-lg p-6">
            <h3 class="font-mono text-lg text-tui-amber mb-4">Key Metrics</h3>
            <ul class="space-y-2">
              {entry.data.metrics.map((metric, idx) => 
                <li key={idx} class="flex items-start space-x-2 text-sm text-gray-300">
                  <span class="text-tui-green mt-1 flex-shrink-0">â€¢</span>
                  <span>{metric}</span>
                </li>
              )}
            </ul>
          </div>
        )}

        <!-- Links -->
        {entry.data.links.length > 0 && (
          <div class="terminal-border rounded-lg p-6">
            <h3 class="font-mono text-lg text-tui-cyan mb-4">Links</h3>
            <div class="space-y-3">
              {entry.data.links.map((link, idx) => 
                <a key={idx} 
                   href={link.url} 
                   target="_blank" 
                   rel="noopener noreferrer"
                   class="flex items-center space-x-2 text-sm text-tui-cyan hover:text-tui-green transition-colors">
                  <ExternalLink className="w-4 h-4 flex-shrink-0" />
                  <span>{link.label}</span>
                </a>
              )}
            </div>
          </div>
        )}

        <!-- Debug Info -->
        <div class="terminal-border rounded-lg p-6 bg-tui-bg/50">
          <h3 class="font-mono text-xs text-gray-500 mb-2">Debug Info</h3>
          <div class="font-mono text-xs text-gray-600 space-y-1">
            <div>Slug: {entry.slug}</div>
            <div>Type: {entry.data.type}</div>
            <div>Featured: {entry.data.featured ? 'Yes' : 'No'}</div>
            <div>Draft: {entry.data.draft ? 'Yes' : 'No'}</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Navigation Footer -->
    <footer class="mt-12 pt-8 border-t border-gray-700">
      <div class="flex justify-between items-center">
        <a href="/" 
           class="inline-flex items-center space-x-2 px-4 py-2 terminal-border rounded font-mono text-sm text-tui-cyan hover:bg-tui-panel transition-colors">
          <ChevronLeft className="w-4 h-4" />
          <span>Back to timeline</span>
        </a>
        
        <div class="font-mono text-xs text-gray-500">
          Entry: {entry.slug}
        </div>
      </div>
    </footer>
  </div>
</BaseLayout>

<style>
  /* Custom prose styles for MDX content */
  .prose {
    color: #d1d5db;
  }
  
  .prose h1 {
    color: var(--tui-green);
    font-family: 'IBM Plex Mono', monospace;
  }
  
  .prose h2 {
    color: var(--tui-cyan);
    font-family: 'IBM Plex Mono', monospace;
  }
  
  .prose h3 {
    color: var(--tui-amber);
    font-family: 'IBM Plex Mono', monospace;
  }
  
  .prose h4, .prose h5, .prose h6 {
    color: #e5e7eb;
    font-family: 'IBM Plex Mono', monospace;
  }
  
  .prose strong {
    color: #ffffff;
    font-weight: 600;
  }
  
  .prose code {
    background-color: var(--tui-panel);
    color: var(--tui-green);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  .prose pre {
    background-color: var(--tui-panel);
    border: 1px solid #374151;
  }
  
  .prose blockquote {
    border-left: 4px solid var(--tui-amber);
    background-color: var(--tui-panel);
    padding: 1rem;
    margin: 1.5rem 0;
  }
  
  .prose ul, .prose ol {
    color: #d1d5db;
  }
  
  .prose li::marker {
    color: var(--tui-green);
  }
</style>
